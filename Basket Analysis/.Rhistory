sku$price2 <-as.numeric(sku$price2)
sku$name <- as.character(sku$name)
sku$thumbnail <- as.character(sku$thumbnail)
#ARREGLAR
colnames(sku)[9] <-"email"
#marcar productos
sku$duplicated <- duplicated(sku$email)
sku$duplicated2 <- duplicated(subset(sku,select=c(email,duplicated)))
sku$duplicated3 <- duplicated(subset(sku,select=c(email,duplicated,duplicated2)))
sku$numproducto[sku$duplicated==TRUE & sku$duplicated2==TRUE & sku$duplicated3==FALSE] <- "producto3"
sku$numproducto[sku$duplicated==TRUE & sku$duplicated2==FALSE & sku$duplicated3==FALSE] <- "producto2"
sku$numproducto[sku$duplicated==FALSE & sku$duplicated2==FALSE & sku$duplicated3==FALSE] <- "producto1"
sku <-subset(sku,select=-c(duplicated,duplicated2,duplicated3))
sku <- sku[complete.cases(sku),]
#convertir a ancho
skuid<-subset(sku,select=c("ID","email"))
skuid<-unique(skuid)
sku <-subset(sku,select=-c(price1,price2,ID))
sku2 <- reshape(sku,
timevar="numproducto",
idvar=c("email"),
direction = "wide")
library(RMySQL)
options("scipen" = 10)
options()$scipen
setwd("~/Dropbox/Ripley/Analytics/baja de precio")
#sku <- read.csv("~/Dropbox/Ripley/Analytics/baja de precio/sku.csv")
retarget <- dbConnect(MySQL(),
user="big_data", password="analytics",
dbname="BigData", host="data.retargeting.cl")
skuquery <- paste(readLines("sku.sql2.R",encoding="utf-8"),collapse=" ") #VERSION
skuquery <- gsub("\"","'", skuquery)
sku <- dbGetQuery(retarget,skuquery)
#Limpieza de nombre
sku$name <- as.character(sku$name)
trim.trailing <- function (x) sub("\\s+$", "", x)
sku$name <- trim.trailing(sku$name)
#limpieza de precios
sku$price1 <-as.character(sku$price1)
sku$price2 <-as.character(sku$price2)
sku$price1 <-as.numeric(sku$price1)
sku$price2 <-as.numeric(sku$price2)
sku$name <- as.character(sku$name)
sku$thumbnail <- as.character(sku$thumbnail)
#marcar productos
sku$duplicated <- duplicated(sku$email)
sku$duplicated2 <- duplicated(subset(sku,select=c(email,duplicated)))
sku$duplicated3 <- duplicated(subset(sku,select=c(email,duplicated,duplicated2)))
sku$numproducto[sku$duplicated==TRUE & sku$duplicated2==TRUE & sku$duplicated3==FALSE] <- "producto3"
sku$numproducto[sku$duplicated==TRUE & sku$duplicated2==FALSE & sku$duplicated3==FALSE] <- "producto2"
sku$numproducto[sku$duplicated==FALSE & sku$duplicated2==FALSE & sku$duplicated3==FALSE] <- "producto1"
sku <-subset(sku,select=-c(duplicated,duplicated2,duplicated3))
sku <- sku[complete.cases(sku),]
#convertir a ancho
skuid<-subset(sku,select=c("ID","email"))
skuid<-unique(skuid)
sku <-subset(sku,select=-c(price1,price2,ID))
sku2 <- reshape(sku,
timevar="numproducto",
idvar=c("email"),
direction = "wide")
View(sku2)
View(transrules2)
transrules2 <- subset(transrules2,select=("antecedent","consequent"))
transrules2 <- subset(transrules2,select=c("antecedent","consequent"))
View(transrules2)
View(productos)
transrules <- merge(transrules2,productos,by.x="consequent",by.y="sku")
View(transrules2)
transrules <- merge(transrules2,productos,by.x="consequent",by.y="sku")
View(transrules2)
View(productos)
class(transrules2$antecedent)
class(productos$sku)
table(transrules2$consequent %in% productos$sku)
table(transrules2$antecedent %in% productos$sku)
View(productos)
transrules2$consequent[1]
write.table(vistas,file="vistas.csv",sep=",",row.names=F)
trans <- read.transactions("vistas.csv", format = "single", sep = ",", cols = c("userID", "sku"),rm.duplicates = TRUE)
transrules <- apriorialg(trans, parameter = list(support =0.0001, confidence = 0.0001, maxlen=2,target="rules"))
transrules2 <- as(transrules, "data.frame")
transrules2$rules <- gsub("\\}", "", transrules2$rules)
transrules2$rules <- gsub("\\{", "", transrules2$rules)
transrules2$rules <- as.character(transrules2$rules)
transrules2$antecedent <- sub("=.*$", "\\1", transrules2$rules)
transrules2$antecedent <- substr(transrules2$antecedent, 1, nchar(transrules2$antecedent)-1)
transrules2$consequent <- gsub(".*=>", "", transrules2$rules)
transrules$consequent <- sub(" ","",transrules$consequent)
transrules2 <- transrules2[which(transrules2$antecedent !="" & transrules2$consequent!=""), ]
transrules2$lift <- as.numeric(transrules2$lift)
transrules2 <- transrules2[order(-transrules2$lift),]
transrules2 <- transrules2[!duplicated(transrules2$antecedent),]
transrules2 <- subset(transrules2,select=c("antecedent","consequent"))
write.table(vistas,file="vistas.csv",sep=",",row.names=F)
trans <- read.transactions("vistas.csv", format = "single", sep = ",", cols = c("userID", "sku"),rm.duplicates = TRUE)
transrules <- apriorialg(trans, parameter = list(support =0.0001, confidence = 0.0001, maxlen=2,target="rules"))
transrules2 <- as(transrules, "data.frame")
transrules2$rules <- gsub("\\}", "", transrules2$rules)
transrules2$rules <- gsub("\\{", "", transrules2$rules)
transrules2$rules <- as.character(transrules2$rules)
transrules2$antecedent <- sub("=.*$", "\\1", transrules2$rules)
transrules2$antecedent <- substr(transrules2$antecedent, 1, nchar(transrules2$antecedent)-1)
transrules2$consequent <- gsub(".*=>", "", transrules2$rules)
transrules$consequent <- sub("^\\s+","",transrules$consequent)
transrules2 <- transrules2[which(transrules2$antecedent !="" & transrules2$consequent!=""), ]
transrules2$lift <- as.numeric(transrules2$lift)
transrules2 <- transrules2[order(-transrules2$lift),]
transrules2 <- transrules2[!duplicated(transrules2$antecedent),]
transrules2 <- subset(transrules2,select=c("antecedent","consequent"))
transrules$consequent <- sub("\\s","",transrules$consequent)
transrules$consequent <- sub("\\","",transrules$consequent)
transrules$consequent <- sub("\\","",transrules$consequent)
transrules$consequent <- sub("\\ ","",transrules$consequent)
transrules$consequent <- sub(" $","",transrules$consequent)
transrules$consequent <- sub("^\\s+","",transrules$consequent)
write.table(vistas,file="vistas.csv",sep=",",row.names=F)
trans <- read.transactions("vistas.csv", format = "single", sep = ",", cols = c("userID", "sku"),rm.duplicates = TRUE)
transrules <- apriorialg(trans, parameter = list(support =0.0001, confidence = 0.0001, maxlen=2,target="rules"))
transrules2 <- as(transrules, "data.frame")
transrules2$rules <- gsub("\\}", "", transrules2$rules)
transrules2$rules <- gsub("\\{", "", transrules2$rules)
transrules2$rules <- as.character(transrules2$rules)
transrules2$antecedent <- sub("=.*$", "\\1", transrules2$rules)
transrules2$antecedent <- substr(transrules2$antecedent, 1, nchar(transrules2$antecedent)-1)
transrules2$consequent <- gsub(".*=>", "", transrules2$rules)
transrules$consequent <- sub("^\\s+","",transrules$consequent)
write.table(vistas,file="vistas.csv",sep=",",row.names=F)
trans <- read.transactions("vistas.csv", format = "single", sep = ",", cols = c("userID", "sku"),rm.duplicates = TRUE)
transrules <- apriorialg(trans, parameter = list(support =0.0001, confidence = 0.0001, maxlen=2,target="rules"))
transrules2 <- as(transrules, "data.frame")
transrules2$rules <- gsub("\\}", "", transrules2$rules)
transrules2$rules <- gsub("\\{", "", transrules2$rules)
transrules2$rules <- as.character(transrules2$rules)
transrules2$antecedent <- sub("=.*$", "\\1", transrules2$rules)
transrules2$antecedent <- substr(transrules2$antecedent, 1, nchar(transrules2$antecedent)-1)
transrules2$consequent <- gsub(".*=>", "", transrules2$rules)
transrules2$consequent <- sub("^\\s+","",transrules$consequent)
transrules2$consequent <- sub("\\s","",transrules$consequent)
transrules2$consequent <- sub("\\ ","",transrules$consequent)
View(transrules2)
transrules2 <- transrules2[which(transrules2$antecedent !="" & transrules2$consequent!=""), ]
View(transrules2)
transrules2$consequent[1]
write.table(vistas,file="vistas.csv",sep=",",row.names=F)
trans <- read.transactions("vistas.csv", format = "single", sep = ",", cols = c("userID", "sku"),rm.duplicates = TRUE)
transrules <- apriorialg(trans, parameter = list(support =0.0001, confidence = 0.0001, maxlen=2,target="rules"))
transrules2 <- as(transrules, "data.frame")
transrules2$rules <- gsub("\\}", "", transrules2$rules)
transrules2$rules <- gsub("\\{", "", transrules2$rules)
transrules2$rules <- as.character(transrules2$rules)
transrules2$antecedent <- sub("=.*$", "\\1", transrules2$rules)
transrules2$antecedent <- substr(transrules2$antecedent, 1, nchar(transrules2$antecedent)-1)
transrules2$consequent <- gsub(".*=>", "", transrules2$rules)
#transrules2$consequent <- sub("\\ ","",transrules$consequent)
transrules2 <- transrules2[which(transrules2$antecedent !="" & transrules2$consequent!=""), ]
transrules2$lift <- as.numeric(transrules2$lift)
transrules2 <- transrules2[order(-transrules2$lift),]
transrules2 <- transrules2[!duplicated(transrules2$antecedent),]
transrules2 <- subset(transrules2,select=c("antecedent","consequent"))
transrules <- merge(transrules2,productos,by.x="consequent",by.y="sku")
class(transrules2$antecedent)
class(productos$sku)
table(transrules2$antecedent %in% productos$sku)
transrules2$consequent[1]
transrules2$consequent <- sub("\\ ","",transrules2$consequent)
transrules2$consequent[1]
write.table(vistas,file="vistas.csv",sep=",",row.names=F)
trans <- read.transactions("vistas.csv", format = "single", sep = ",", cols = c("userID", "sku"),rm.duplicates = TRUE)
transrules <- apriorialg(trans, parameter = list(support =0.0001, confidence = 0.0001, maxlen=2,target="rules"))
transrules2 <- as(transrules, "data.frame")
transrules2$rules <- gsub("\\}", "", transrules2$rules)
transrules2$rules <- gsub("\\{", "", transrules2$rules)
transrules2$rules <- as.character(transrules2$rules)
transrules2$antecedent <- sub("=.*$", "\\1", transrules2$rules)
transrules2$antecedent <- substr(transrules2$antecedent, 1, nchar(transrules2$antecedent)-1)
transrules2$consequent <- gsub(".*=>", "", transrules2$rules)
transrules2$consequent <- sub("\\ ","",transrules2$consequent)
transrules2 <- transrules2[which(transrules2$antecedent !="" & transrules2$consequent!=""), ]
transrules2$lift <- as.numeric(transrules2$lift)
transrules2 <- transrules2[order(-transrules2$lift),]
transrules2 <- transrules2[!duplicated(transrules2$antecedent),]
transrules2 <- subset(transrules2,select=c("antecedent","consequent"))
transrules <- merge(transrules2,productos,by.x="consequent",by.y="sku")
transrules2$consequent[1]
View(transrules)
View(sku2)
View(sku2)
View(transrules2)
transrules2 <- merge(transrules2,productos,by.x="consequent",by.y="sku")
which("2000324504459" %in% transrules2$consequent)
which("2000350023962" %in% transrules2$consequent)
which("2000325250423" %in% transrules2$consequent)
which("2000325250423" %in% transrules2$antecedent)
whichtransrules2$antecedent %in%"2000325250423")
which(transrules2$antecedent %in%"2000325250423")
which(transrules2$consequent %in%"2000337992625")
which(transrules2$consequent %in%"2000337992625")
which(transrules2$consequent %in%"2000324504459")
which(transrules2$consequent %in%"2000324504459")
View(transrules2)
which(transrules2$consequent %in%"2000334055538")
which(transrules2$consequent %in% "2000334055538")
View(transrules2)
which(transrules2$consequent %in% "2000302389375")
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2)){
posicion2 <- which(transrules2$consequent %in% sku2$name.producto1[i])
print(posicion2)
}
}
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i])){
posicion2 <- which(transrules2$consequent %in% sku2$name.producto1[i])
print(posicion2)
}
}
posicion2 <- which(transrules2$consequent %in% sku2$name.producto1[2])
print(posicion2)
posicion2 <- which(transrules2$antecedent %in% sku2$name.producto1[2])
print(posicion2)
posicion2
which(transrules2$antecedent %in% sku2$name.producto1[2])
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[2])
print(posicion2)
posicion2
sku2$sku.producto1[2]
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[1])
print(posicion2)
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i])){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
print(posicion2)
}
}
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i])){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
print(posicion2)
}
}
transrules2$antecedent %in% sku2$sku.producto1[i]
sku2$sku.producto1 %in% transrules2$antecedent
sku2$sku.producto1[1] %in% transrules2$antecedent
sku2$sku.producto1[2] %in% transrules2$antecedent
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i]) &sku2$sku.producto1[i] %in% transrules2$antecedent){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
print(posicion2)
}
}
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i]) &sku2$sku.producto1[i] %in% transrules2$antecedent){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto2 <- transrules2$thumbnail[posicion2]
sku2$url.producto2 <- transrules2$url[posicion2]
sku2$name.producto2 <-transrules2$name[posicion2]
print(posicion2)
}
}
View(sku2)
##### REEMPLAZO EN SKU2
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i]) &sku2$sku.producto1[i] %in% transrules2$antecedent){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto2 <- transrules2$thumbnail[posicion2]
sku2$url.producto2 <- transrules2$url[posicion2]
sku2$name.producto2 <-transrules2$name[posicion2]
print(posicion2)
}
}
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto2 <- transrules2$thumbnail[posicion2]
sku2$url.producto2 <- transrules2$url[posicion2]
sku2$name.producto2 <-transrules2$name[posicion2]
print(posicion2)
}
}
is.na(sku2$sku.producto2[1])
(sku2$sku.producto1[i] %in% transrules2$antecedent)
is.na(sku2$sku.producto2[1]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[1])
sku2$thumbnail.producto2 <- transrules2$thumbnail[posicion2]
transrules2$thumbnail[posicion2]
transrules2$url[posicion2]
transrules2$name[posicion2]
View(sku2)
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto2[i] <- transrules2$thumbnail[posicion2]
sku2$url.producto2[i] <- transrules2$url[posicion2]
sku2$name.producto2[i] <-transrules2$name[posicion2]
print(posicion2)
}
}
View(sku2)
View(sku2)
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto3) !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)){
posicion3 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto3[i] <- transrules2$thumbnail[posicion3]
sku2$url.producto3[i] <- transrules2$url[posicion3]
sku2$name.producto3[i] <-transrules2$name[posicion3]
print(posicion2)
}
}
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto3) !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)){
posicion3 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto3[i] <- transrules2$thumbnail[posicion3]
sku2$url.producto3[i] <- transrules2$url[posicion3]
sku2$name.producto3[i] <-transrules2$name[posicion3]
print(posicion2)
}
}
if(is.na(sku2$sku.producto3) !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)){
posicion3 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto3[i] <- transrules2$thumbnail[posicion3]
sku2$url.producto3[i] <- transrules2$url[posicion3]
sku2$name.producto3[i] <-transrules2$name[posicion3]
print(posicion2)
}
is.na(sku2$sku.producto3) !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)
for(i in 1:length(sku2$email)){
if( is.na(sku2$sku.producto3[i]) !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)){
posicion3 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto3[i] <- transrules2$thumbnail[posicion3]
sku2$url.producto3[i] <- transrules2$url[posicion3]
sku2$name.producto3[i] <-transrules2$name[posicion3]
print(posicion2)}
}
for(i in 1:length(sku2$email)){
if( is.na(sku2$sku.producto3[i]) & !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent) ){
posicion3 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto3[i] <- transrules2$thumbnail[posicion3]
sku2$url.producto3[i] <- transrules2$url[posicion3]
sku2$name.producto3[i] <-transrules2$name[posicion3]
print(posicion2)}
}
for(i in 1:length(sku2$email)){
if( is.na(sku2$sku.producto3[i]) & !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent) ){
posicion3 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto3[i] <- transrules2$thumbnail[posicion3]
sku2$url.producto3[i] <- transrules2$url[posicion3]
sku2$name.producto3[i] <-transrules2$name[posicion3]
print(posicion3)}
}
View(sku2)
for(i in 1:length(sku2$email))
{
posicion2 <- sample(1:length(sku2$email),1)
while (posicion2==i){
posicion2 <- sample(1:length(sku2$email),1)
}
posicion3 <- sample(1:length(sku2$email),1)
while (posicion3==posicion2 | posicion3==i){
posicion3 <- sample(1:length(sku2$email),1)
}
sku2$thumbnail.producto2[i][is.na(sku2$thumbnail.producto2[i])] <-sku2$thumbnail.producto1[posicion2]
sku2$name.producto2[i][is.na(sku2$name.producto2[i])] <- sku2$name.producto1[posicion2]
sku2$url.producto2[i][is.na(sku2$url.producto2[i])] <- sku2$url.producto1[posicion2]
while(sku2$name.producto1[i]==sku2$name.producto2[i]){
print("ERROR")
print(posicion2)
posicion2 <- sample(1:length(sku2$email),1)
sku2$thumbnail.producto2[i] <-sku2$thumbnail.producto1[posicion2]
sku2$name.producto2[i] <- sku2$name.producto1[posicion2]
sku2$url.producto2[i] <- sku2$url.producto1[posicion2]
}
sku2$thumbnail.producto3[i][is.na(sku2$thumbnail.producto3[i])] <-sku2$thumbnail.producto1[posicion2]
sku2$name.producto3[i][is.na(sku2$name.producto3[i])] <- sku2$name.producto1[posicion2]
sku2$url.producto3[i][is.na(sku2$url.producto3[i])] <- sku2$url.producto1[posicion2]
#URL
while(sku2$name.producto1[i]==sku2$name.producto3[i] | sku2$name.producto2[i]==sku2$name.producto3[i]){
print("ERROR")
print(posicion2)
posicion2 <- sample(1:length(sku2$email),1)
sku2$thumbnail.producto3[i] <-sku2$thumbnail.producto1[posicion2]
sku2$name.producto3[i] <- sku2$name.producto1[posicion2]
sku2$url.producto3[i] <- sku2$url.producto1[posicion2]
}
}
View(sku2)
library(RMySQL)
options("scipen" = 10)
options()$scipen
setwd("~/Dropbox/Ripley/Analytics/baja de precio")
#sku <- read.csv("~/Dropbox/Ripley/Analytics/baja de precio/sku.csv")
retarget <- dbConnect(MySQL(),
user="big_data", password="analytics",
dbname="BigData", host="data.retargeting.cl")
skuquery <- paste(readLines("sku.sql2.R",encoding="utf-8"),collapse=" ") #VERSION
skuquery <- gsub("\"","'", skuquery)
sku <- dbGetQuery(retarget,skuquery)
#Limpieza de nombre
sku$name <- as.character(sku$name)
trim.trailing <- function (x) sub("\\s+$", "", x)
sku$name <- trim.trailing(sku$name)
#limpieza de precios
sku$price1 <-as.character(sku$price1)
sku$price2 <-as.character(sku$price2)
sku$price1 <-as.numeric(sku$price1)
sku$price2 <-as.numeric(sku$price2)
sku$name <- as.character(sku$name)
sku$thumbnail <- as.character(sku$thumbnail)
#marcar productos
sku$duplicated <- duplicated(sku$email)
sku$duplicated2 <- duplicated(subset(sku,select=c(email,duplicated)))
sku$duplicated3 <- duplicated(subset(sku,select=c(email,duplicated,duplicated2)))
sku$numproducto[sku$duplicated==TRUE & sku$duplicated2==TRUE & sku$duplicated3==FALSE] <- "producto3"
sku$numproducto[sku$duplicated==TRUE & sku$duplicated2==FALSE & sku$duplicated3==FALSE] <- "producto2"
sku$numproducto[sku$duplicated==FALSE & sku$duplicated2==FALSE & sku$duplicated3==FALSE] <- "producto1"
sku <-subset(sku,select=-c(duplicated,duplicated2,duplicated3))
sku <- sku[complete.cases(sku),]
#convertir a ancho
skuid<-subset(sku,select=c("ID","email"))
skuid<-unique(skuid)
sku <-subset(sku,select=-c(price1,price2,ID))
sku2 <- reshape(sku,
timevar="numproducto",
idvar=c("email"),
direction = "wide")
View(sku2)
library(DBI)
library(RMySQL)
library(arules)
setwd("~/Dropbox/Ripley/Analytics/Basket Analysis")
retarget <- dbConnect(MySQL(),
user="big_data", password="analytics",
dbname="BigData", host="data.retargeting.cl")
vistas <- dbGetQuery(retarget,"select p.sku, p.userID
from product_views p
inner join sku s on p.sku = s.sku
WHERE p.timestamp > UNIX_TIMESTAMP(subdate(current_date, 20));")
productos <- dbGetQuery(retarget,"select s.sku, s.url, s.thumbnail, s.name
from sku s;")
apriorialg<- function (data, parameter = NULL, appearance = NULL, control = NULL)
{
data <- as(data, "transactions")
items <- data@data
if (is(appearance, "list"))
appearance <- as(c(appearance, list(labels = itemLabels(data))),
"APappearance")
appearance <- as(appearance, "APappearance")
control <- as(control, "APcontrol")
parameter <- as(parameter, "APparameter")
if (control@verbose) {
cat("\nParameter specification:\n")
print(parameter)
cat("\nAlgorithmic control:\n")
print(control)
cat("\n")
}
abs_supp <- as.integer(parameter@support * length(data))
if (abs_supp < 2)
warning(sprintf("Numero de soporte muy bajo. Pueden ocurrir fallas de memoria",
abs_supp), immediate. = TRUE)
result <- .Call("rapriori", items@p, items@i, items@Dim,
parameter, control, appearance, data@itemInfo, PACKAGE = "arules")
call <- match.call()
result@info <- list(data = call$data, ntransactions = length(data),
support = parameter@support, confidence = parameter@confidence)
if (is(result, "rules")) {
validObject(result@lhs@data)
validObject(result@rhs@data)
}
else {
validObject(result@items@data)
}
result
}
write.table(vistas,file="vistas.csv",sep=",",row.names=F)
trans <- read.transactions("vistas.csv", format = "single", sep = ",", cols = c("userID", "sku"),rm.duplicates = TRUE)
transrules <- apriorialg(trans, parameter = list(support =0.0001, confidence = 0.0001, maxlen=2,target="rules"))
transrules2 <- as(transrules, "data.frame")
transrules2$rules <- gsub("\\}", "", transrules2$rules)
transrules2$rules <- gsub("\\{", "", transrules2$rules)
transrules2$rules <- as.character(transrules2$rules)
transrules2$antecedent <- sub("=.*$", "\\1", transrules2$rules)
transrules2$antecedent <- substr(transrules2$antecedent, 1, nchar(transrules2$antecedent)-1)
transrules2$consequent <- gsub(".*=>", "", transrules2$rules)
transrules2$consequent <- sub("\\ ","",transrules2$consequent)
transrules2 <- transrules2[which(transrules2$antecedent !="" & transrules2$consequent!=""), ]
transrules2$lift <- as.numeric(transrules2$lift)
transrules2 <- transrules2[order(-transrules2$lift),]
transrules2 <- transrules2[!duplicated(transrules2$antecedent),]
transrules2 <- subset(transrules2,select=c("antecedent","consequent"))
transrules2 <- merge(transrules2,productos,by.x="consequent",by.y="sku")
##### REEMPLAZO EN SKU2
for(i in 1:length(sku2$email)){
if(is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent)){
posicion2 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto2[i] <- transrules2$thumbnail[posicion2]
sku2$url.producto2[i] <- transrules2$url[posicion2]
sku2$name.producto2[i] <-transrules2$name[posicion2]
print(posicion2)
}
}
for(i in 1:length(sku2$email)){
if( is.na(sku2$sku.producto3[i]) & !is.na(sku2$sku.producto2[i]) & (sku2$sku.producto1[i] %in% transrules2$antecedent) ){
posicion3 <- which(transrules2$antecedent %in% sku2$sku.producto1[i])
sku2$thumbnail.producto3[i] <- transrules2$thumbnail[posicion3]
sku2$url.producto3[i] <- transrules2$url[posicion3]
sku2$name.producto3[i] <-transrules2$name[posicion3]
print(posicion3)}
}
View(transrules2)
View(sku2)
plot(transrules, method="matrix")
